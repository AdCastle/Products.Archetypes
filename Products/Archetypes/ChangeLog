2003-04-27  Sidnei da Silva  <sidnei@x3ng.com>

	* Marshall.py (RFC822Marshaller.demarshall): Use the mutator
	instead of field.set(). 
	(RFC822Marshaller.marshall): Add a new line.

2003-04-25  Sidnei da Silva  <sidnei@x3ng.com>

	* tests/test_all.py (test_suite): Was missing a test on the test suite.

2003-04-23  Sidnei da Silva  <sidnei@x3ng.com>

	* Schema.py (MetadataSchema.addField): Layer was not being
	registered, which caused it not to be initialized/cleaned.

	* Storage.py (Storage.__repr__): Uniquefy Storage. Storages dont
	have special attributes, so using two instances need to be like
	one to initializeLayers and cleanupLayers.

	* Marshall.py (Marshaller.cleanupInstance): Avoid trying to delete
	the hook twice. XXX Need to find out why it is being called twice.

	* Field.py (TextField.set): The the mime-type parameter is spelled
	mime_type, also, the new BaseUnit doesnt accepts an instance parameter.

2003-04-22  Benjamin Saller  <bcsaller@yahoo.com>

	* tests/test_referenceable.py
	(ReferenceableTests.test_relationships): Added tests for and the
	ability to define the relationship between references. Look at the
	test for details but know that we can say things like:
		a.addReference('Owns', b)
		a.getRefs() = [..all..]
		a.getRefs('Owns') [b]

	IMPORTANT: The old storage format for reference is no longer
	supported. It should possible to convert to the new model using a
	script and a default relationship type though
		
	
2003-04-22  Sidnei da Silva  <sidnei@x3ng.com>

	* Marshall.py (Marshaller.initializeInstance): Method was not
	matching the interface.
	(RFC822Marshaller.marshall): Check by interface, instead of attribute.
	(Marshaller.initializeInstance): Better initialization/cleanup.

	* interfaces/layer.py (ILayerRuntime.initializeLayers): Update
	interfaces to match the real implementation.


2003-04-21  Sidnei da Silva  <sidnei@x3ng.com>

	* BaseContent.py (BaseContent): No ObjectManager here please.

	* Field.py (ImageField): Theres no reason why this coudlnt use
	AttributeStorage by default. Using ObjectManagedStorage breaks it
	when using with BaseContent objects.

	* tests/test_baseunit.py (BaseUnitTest.testSame): Added the same
	tests here as on the transform package, to confirm it works with
	the new BaseUnit.

2003-04-20  Sidnei da Silva  <sidnei@x3ng.com>

	* content_driver/html4zope.py: Fixed Subtitle.

2003-04-19  Sidnei da Silva  <sidnei@x3ng.com>

	* Marshall.py (RFC822Marshaller.demarshall): Adding a bare RFC822
	Marshaller, and fixing lots of typoes :P
	(RFC822Marshaller.marshall): Should use instance['field_name'] to
	reliably access fields. BaseObject.__getitem__ does the right job
	at getting and calliing the accessor.

	* content_driver/reST.py (Converter.convertData): Rendering of
	reST was broken. It was not rendering references the right way,
	and it didnt seem like it was doing the right thing with
	titles. Updated to use docutils.core.publish_string.

	* tests/test_baseunit.py: Added minimal test for BaseUnit.

2003-04-18  Sidnei da Silva  <sidnei@x3ng.com>

	* public.py: Added BaseBTreeFolderSchema. Fixed BaseFolderSchema
	and BaseSchema, now that we have added ExtensibleMetadata in the classes.

2003-04-17  Benjamin Saller  <bcsaller@yahoo.com>

	* ArchetypeTool.py (listTypes): deprecated old listTypes, but keep
	the import working, this should avoid a class of errors coming
	from 'near misses' on the imports


2003-04-16  Sidnei da Silva  <sidnei@x3ng.com>

        * BaseFolder.py: Add ExtensibleMetadata.schema to the Folder
	schema. Otherwise, were dont really implement IExtensibleMetadata.

	* BaseFolder.py (BaseFolder.manage_afterAdd): SkinnedFolder
	subclasses CMFCatalogAware, so, now that Referenceable doenst
	subclasses it anymore, we call SkinnedFolder.manage_afterAdd.

	* BaseContent.py (BaseContent.manage_afterAdd): PortalContent
	subclasses CMFCatalogAware, so, now that Referenceable doenst
	subclasses it anymore, we call PortalContent.manage_afterAdd.

	* Referenceable.py (Referenceable.manage_afterAdd): Dont subclass
	CMFCatalogAware anymore. Some methods were being called twice,
	because of this, and some initialization couldnt be performed
	because it tried to catalog fields that were not being
	initialized, and you couldnt make initialization happen first
	because it could depend on UID being set.

	* ArchetypeTool.py (modify_fti): Setting category to Folder was
	causing bad things. We need to fix plone, because a portal_type
	that is marked as 'use_folder_tabs' dont get tabs of the object category.
	(modify_fti): Hide references if IReferenceable is not implemented
	by the class.
	(modify_fti): Hide metadata if IExtensibleMetadata is not
	implemented by the class.

	* BaseContent.py: Assert that we implement IReferenceable

	* BaseFolder.py: Assert that we implement IReferenceable

	* BaseObject.py: Assert that we implement IReferenceable

	* interfaces/referenceable.py (IReferenceable._verifyObjectPaste):
	Added IReferenceable interface.

2003-04-15  Benjamin Saller  <bcsaller@yahoo.com>

	* Made widget.Description more runtime callable by looking for an
	optional method on the class of its name and returning its value. 

2003-04-15  Sidnei da Silva  <sidnei@x3ng.com>

	* skins/archetypes/widgets/lines.pt: Should be :lines, not
	:list. Textareas dont have a value attribute.

	* skins/archetypes/base_view.pt: Allow users to provide custom
	header, body and footer macros for the the autogenerated
	view. This happens by looking for a template named
	'${portal_type}_view' and inside this template, looking for macros
	named 'header', 'body' and 'footer'. The body macro overrides the
	generated field listing. The header macro is inserted at the top,
	replacing <h1>Title</h1> and the footer macro is inserted after
	the field listing.

	* SQLStorage.py: Forgot to import type_map from Storage.py

2003-04-14  Sidnei da Silva  <sidnei@x3ng.com>

	* BaseBTreeFolder.py: Declare the right interfaces we implement.

	* ArchetypeTool.py (modify_fti): Make folderish types actions have
	a category of 'folder', so it works correctly with Plone.

	* public.py: Make Storages and DisplayList available from public.

	* SQLStorage.py: Import only what is needed from Storage.

	* Storage.py (__all__): Restrict whats going to be imported so we
	dont pollute the namespace.

	* BaseObject.py (BaseObject.__getitem__): Was not playing nicely
	with acquisition.

2003-04-12  Sidnei da Silva  <sidnei@x3ng.com>

	* *.py: Removed trailing whitespace and rewrapped some long lines. 

	* Marshall.py (PrimaryFieldMarshaller.marshall): Fixing a broken
	import plus moving interface declaration to interfaces subdir.

2003-04-08  Benjamin Saller  <bcsaller@yahoo.com>

	* ArchetypeTool.py (process_types): changed the module level fti
	hook to pass fti[0] as its simpler for the developer

2003-04-07 Sidnei da Silva <sidnei@x3ng.com>

        * Made possible to have multiple fieldsets (they are called
	schemata). Just add "schemata = 'your_fieldset_name' when
	declaring a field. It will show up as a link on your edit form.

	* Blown away validate_metadata.py and metadata_edit.py. You may
	need to fix your portal_properties/form_properties
	[validate_metadata -> validate_base] and
	portal_properties/navigation_properties [metadata_edit ->
	content_edit] on your existing sites.

2003-02-11  Benjamin Saller  <bcsaller@yahoo.com>

	* Field.py (FieldList.__init__): Added the ability for FieldList
	to hold properties itself and be a layer container. Added minimal
	support for the marshalling layer.

	* BaseObject.py (content_type): Makeing title's default='' makes
	this work with ZCTextIndex again on creation.

	* GeneratorTool.py (modify_fti): icon is a name used by the ZMI,
	we don't wanna play in that name space so to specify an icon use
	the content_icon name

	* Marshall.py (Marshaller.__init__): A default marshalling impl
	can store hooks that it will call on the instance that should take
	the data that comes out of the demarshall call and update the
	object as needed.

	* BaseContent.py (BaseContent.PUT): Notion of top level PUT/ftpGET
	handling that deligates to a plugable marshalling layer, this
	abstaction should get some testing at the sprint.

	* Merged some of VladDrak's patches. I am not going to include the
	metadata patch until I've had more time to look it over but I
	don't mind getting that in given a couple of days.

2003-02-03  Benjamin Saller  <bcsaller@yahoo.com>

	* Field.py (FieldList.__init__): Made FieldList take props, made
	fieldlist a layercontainer, added placeholder for marshalling layer

2003-01-30  Benjamin Saller  <bcsaller@yahoo.com>

	* BaseObject.py (BaseObject.__getitem__): Play nice with Aq again

	* GeneratorTool.py (getType): added introspect tab so when people
	as me what types got registered we can just look now.... This is a
	step towards exposing the schema on the web.

	* BaseUnit.py (BaseUnit.__str__): __call__ maps to str for the
	catalog to work.

2003-01-14  Benjamin Saller  <bcsaller@yahoo.com>

	* templates/singleselection_pulldown_body: use the str() to cmp
	the values. better for int keys

	* Field.py (DateTimeField.set): Don't cvt if if you don't need
	to... duh

	* Storage.py: removed deprecated method from iface

	* BaseUnit.py (BaseUnit.reConvert): docstring to publish

	* GeneratorTool.py (modify_fti): allowed_content_types on a klass
	now sets up the fti, yum.
	(listTypes): listTypes specific to a package with the new argument

2003-01-07  Benjamin Saller  <bcsaller@yahoo.com>

	* GeneratorTool.py (process_types): got rid of the old
	view/edit/script dirs in favor of a simple target_dir (its all
	generated code anyway). This should be honored now, with a default
	of the cmft skin directory.

	* Generator.py (Generator.__init__): All references to editable
	are removed from generator and the templates. The str method on
	BaseUnits mostly covers this as we always return the raw object. 

	* ClassGen.py (Generator.makeMethod): Generate uniform lambda for
	the created methods, this works now that we delegate to the schema
	all the time. Also gets rid of the methods template directory as
	its not needed anymore.

	* Field.py (FieldList.initalizeLayers): Play nice with the layer
	code, I hope to bulid this out a little more in the future, but
	for now its very simple.

	* cmf_types/DDocument.py (content_type): Broke out the schema to
	the module level, types only keep a ref to it. Also see how the
	type is the composite of BaseContent.type and
	ExtensibleMetadata.type.

	* Extensions/utils.py (install_navigation): changes to all the
	external method calls to skip most of the special metadata
	handling. 

	* ExtensibleMetadata.py: Its just called 'type' now, metadata type
	is deprecated and we have more uniform handling of data/metadata.

	* Generator.py (_modes): Generation modes, generate views takes a
	list of either keys to this dict or just new dicts in this format
	that are the modes to be generated. Have fun.

2003-01-05  Benjamin Saller  <bcsaller@yahoo.com>

	* Field.py (FieldList.initalizeLayers): Added Layers calls to
	FieldList and the base Field Object. We explicitly register layers
	and expect that they will get initalized. The idea is that
	subsystems may require particular initalization on the part of an
	instance or an instance's field. The current interfaces support
	this.

2003-01-04  Benjamin Saller  <bcsaller@yahoo.com>

	* ContentTool.py (ContentTool._genId): Mr.Topf caught a bug in id
	generation where I wasn't incrementing the counter
	properly. Patched in accordance with his idea.

	* Storage.py (MetadataStorage.get): Thinking it might make more
	sense to call out to the metadata interface for this, handing off
	the storage concern once again. This can change when storage can
	perform initalization on the object during construction via a
	callback into the schema. Thus each storage item might be able to
	modify the instance if need be.

2003-01-03  Benjamin Saller  <bcsaller@yahoo.com>

	* ExtensibleMetadata.py (metadatatype): Updated field to use
	MetadataField type (and the new Metadata Storage) and removed a
	number of fields that are in the DublinCore but were
	invisible. Trying to let CMFTypes manage these internal fields
	seems to be a mistake so I let the default impl handle it.

	* ClassGen.py (_modes): one more step towards removing editable. I
	will be happy when this is gone

	* BaseObject.py (BaseObject.__init__): Had to move id mgmt to
	later to avoid a special case in the default handling
	(BaseObject.get): delegate through schema

2003-01-02  Benjamin Saller  <bcsaller@yahoo.com>

	* BaseObject.py (BaseObject.Vocabulary): Still trying to figure
	out just what I want to bubble up to this level and what should
	remain in the schema.

	* skins/cmft/collectKeywords.py: use new BaseObject.Vocabulary
	method.

	* Field.py (FieldList._properties): Easier to read/manage way of
	setting Field defaults/properties. See how the other fields use
	the _properties to set defaults and attributes now.

	* debug.py (Log.log_exc): take msg='' and **kwargs now, like log

	* Field.py (ObjectField.get): changed get/set to drive through
	Field.storage (see below)

	* Storage.py: Provide sample storage interface. This layer of
	indirection can be overridden on a per field basis to alter the
	way storage is handled. With the right tool it should be a simple
	task to store large fields on the filesystem or in a RDB of some
	sort. 

	* Field.py (FieldList.setDefaults): Simplfied setDefaults, but now
	it really only should be called when object is uninitalized (which
	I may want to track)

	* BaseUnit.py (BaseUnit.PUT): Fixed PUT to use new driver code	

	* __init__.py (listTypes): Updated to use generatorTool, still
	generates on initalize though

	* GeneratorTool.py (modify_fti): new tool, moved fti stuff here as
	well as process_types and registerType. Also added "icon" as an
	attribute of your content class so you can override its icon

