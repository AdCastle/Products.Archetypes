# -*- coding: UTF-8 -*-
################################################################################
#
# Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
#                              the respective authors. All rights reserved.
# For a list of Archetypes contributors see docs/CREDITS.txt.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of the author nor the names of its contributors may be used
#   to endorse or promote products derived from this software without specific
#   prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
# FOR A PARTICULAR PURPOSE.
#
################################################################################
"""Type registry
"""

__author__ = 'Christian Heimes'

from Products.Archetypes.registry.base import registerRegistry
from Products.Archetypes.registry.base import Registry
from Products.Archetypes.registry.base import RegistryEntry
from Products.Archetypes.interfaces.base import IBaseObject
from Products.Archetypes.lib.logging import log

class TypeEntry(RegistryEntry):
    __used_for__ = IBaseObject
    required = RegistryEntry.required + ('package', )
    
    def process(*kw):
        """Add some additional data to the entry
        """
        klass = self['klass']
        kw.update({
            'name'        : klass.__name__,
            'identifier'  : klass.meta_type.capitalize().replace(' ', '_'),
            'meta_type'   : klass.meta_type,
            'portal_type' : klass.portal_type,
            'package'     : package,
            'module'      : self.getModule(),
            'schema'      : klass.schema,
            'signature'   : klass.schema.signature(),
        })
        kw['key'] = "%s.%s" % (kw['package'], kw['metatype'])
        assert kw['key'] == kw['registry_key']
        return kw
    
    def beforeRegister(self, registry, key):
        """Check if a type was already registered under the type_key
        """
        if key in registry:
            # there is already a type registered under the type_key
            existing = registry[key]
            existing_name = existing.getDottedName()
            override_name = self.getDottedName()
            log('ArchetypesTool: Trying to register "%s" which has already ' \
                'been registered. The new type %s is going to override %s' % \
                (key, override_name, existing_name))
            
            # remove the old entry from the registry
            del registry[key]
            

class TypeRegistry(Registry):
    _entry_class = TypeEntry
    
    def __getitem__(self, key):
        """Support access by class and key
        """
        if isinstance(key, basestring):
            for k, entry in self.typeitems():
                if k == key:
                    return entry
            raise KeyError, key
        else:
            return dict.__getitem__(self, key)
        
    def _createKey(self, klass, key, **kw):
        """For types the key is created from the package and the klass meta type
        """
        if key is not None:
            raise ValueError, 'Keys for types are autogenerated'
        return "%s.%s" (kw['package'], klass.meta_type)

typeRegistry = TypeRegistry()
registerRegistry(typeRegistry)
