<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      i18n:domain="plone">

  <head><title></title></head>

  <body>

    <!-- TextArea Widgets -->

    <metal:view_macro define-macro="view" tal:replace="structure accessor" />

    <metal:define define-macro="area_edit">
      <tal:define tal:define="base python:hasattr(value, 'isUnit');
                    binary python:base and value.isBinary() or here.isBinary(fieldName);
                    content python:(base == 1) and value.getRaw() or value;
                    content python:(binary == 0) and content or '';
                    append_only python: getattr(widget, 'append_only', None)">

      <fieldset tal:condition="append_only">
        <legend tal:content="widget/label">label</legend>
        <span tal:content="content">content</span>
      </fieldset>

      <textarea tabindex="#"
        tal:attributes="name fieldName;
                        id fieldName;
                        cols widget/cols;
                        rows widget/rows;
                        tabindex tabindex/next;"
	tal:define="content python: not append_only and content or '';"
        tal:content="content">content</textarea>

      </tal:define>
    </metal:define>

    <metal:define define-macro="area_format">
      <tal:define define="field_text_format string:${fieldName}_text_format;
                          contentType python:request.get(field_text_format, here.getContentType(fieldName));
                          mimetypes python:[t for t in getattr(field, 'allowable_content_types', ()) if t.startswith('text/')];
                          contenttype python:hasattr(field, 'getContentType') and field.getContentType(here) or ''">

        <tal:condition condition="python:len(mimetypes) &gt; 1">
          <label i18n:translate="label_format">Text Format</label>
          <select tal:attributes="id string:${fieldName}_text_format;
                                  name string:${fieldName}_text_format;
                                  tabindex tabindex/next">
            <option selected="selected"
                    value=""
                    tal:attributes="value contentType"
                    tal:condition="python:contenttype not in mimetypes">
              (no change)
            </option>
            <option tal:repeat="item mimetypes"
                    tal:content="python:here.lookupMime(item)"
                    tal:attributes="value item;
                                    selected python:test(here.checkSelected(item, contenttype, contenttypes=1), 'selected', None);"
                    />
          </select>
        </tal:condition>
        <tal:condition condition="python:len(mimetypes) == 1">
          <input type="hidden"
                 name=""
                 value=""
                 tal:attributes="name field_text_format;
                                 value python:mimetypes[0]"
                 />
        </tal:condition>
      </tal:define>
    </metal:define>

    <metal:define define-macro="edit">
      <metal:use use-macro="field_macro | here/widgets/field/macros/edit">
        <metal:fill fill-slot="widget_body">
          <metal:block use-macro="here/widgets/textarea/macros/area_edit" />
          <metal:block use-macro="here/widgets/textarea/macros/area_format" />
        </metal:fill>
      </metal:use>
    </metal:define>

    <metal:define define-macro="search">
      <metal:use use-macro="here/widgets/field/macros/edit">
        <metal:fill fill-slot="widget_body">

          <metal:block use-macro="here/widgets/textarea/macros/area_edit" />

        </metal:fill>
      </metal:use>
    </metal:define>

  </body>

</html>
