################################################################################
#
# Copyright (c) 2005, Rocky Burt <rocky@serverzen.com>, and the respective
# authors. All rights reserved.  For a list of Archetypes contributors see
# docs/CREDITS.txt.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of the author nor the names of its contributors may be used
#   to endorse or promote products derived from this software without specific
#   prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
# FOR A PARTICULAR PURPOSE.
#
################################################################################

"""
"""
__author__ = 'Rocky Burt'

import os, sys
import StringIO
if __name__ == '__main__':
    execfile(os.path.join(sys.path[0], 'framework.py'))

from Products.CMFCore.utils import getToolByName

from Products.Archetypes.tests.common import ArcheSiteTestCase
from Products.Archetypes.tests.test_classgen import Dummy, gen_dummy
from Products.Archetypes.Extensions.utils import install_subskin
from Products.Archetypes.lib import skins

class SkinManipulationTest(ArcheSiteTestCase):
    """Test all aspects of utility methods dealing with manipulating skins
    and skin paths provided by the portal_skins tool.
    """

    # these need to exist in the input/skins directory beneath this one
    _newPaths = ('skinpath1', 'skinpath2')

    def afterSetUp(self):
        ArcheSiteTestCase.afterSetUp(self)
        gen_dummy()
        self._dummy = dummy = Dummy(oid='dummy')
        self._dummy.initializeArchetype()


    def test_get_existing_skins(self):
        """Make sure that skin path retrieval is currently working and that
        the existing skin paths do not include particular items we may test
        for later on.
        """
        
        portal = self.getPortal()
        skinsTool = getToolByName(portal, 'portal_skins')

        for skinName in skinsTool.getSkinSelections():
            path = skinsTool.getSkinPath(skinName)
            pathList = [i.strip() for i in  path.split(',')]
            for p in self._newPaths:
                self.failUnless(p not in pathList,
                                'Already existing path item "%s"' % p)

    def test_install_subskin(self):
        """Test the ability to add new skin paths to skins.  Test is
        successful as long as when the test is run the items to check now
        exist in the skin paths for each skin.
        """
        
        portal = self.getPortal()
        skinsTool = getToolByName(portal, 'portal_skins')

        # Make sure the path generated by install_subskin based on globals()
        # maps to somewhere sensible.
        d = globals()
        d['__name__'] = 'Products.Archetypes.tests'

        # As of this writing, the out param for install_subskin doesn't actually
        # get used but is provided for api compatibility.
        out = StringIO.StringIO()
        install_subskin(portal, out, d, os.path.join('input', 'skins'))

        for skinName in skinsTool.getSkinSelections():
            path = skinsTool.getSkinPath(skinName)
            pathList = [i.strip() for i in  path.split(',')]
            for p in self._newPaths:
                self.failUnless(p in pathList,
                                'Missing path item "%s"' % p)
        

def test_suite():
    from unittest import TestSuite, makeSuite
    suite = TestSuite()
    suite.addTest(makeSuite(SkinManipulationTest))
    return suite

if __name__ == '__main__':
    framework()
