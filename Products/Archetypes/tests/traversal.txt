Traversal Behavior
==================

BaseObject overrides ``__bobo_traverse__`` to expose subobjects
created by ``PortalTransforms`` during the transformation of
content. However, overriding traversal can be tricky, and very hard to
get right.

Those tests pretend to make sure that this functionality behaves
correctly accross the many use cases that must co-exist.

First, we are going to setup an environment so we can test that stuff
is acquired or not acquired at the right times.

  >>> from Testing.ZopeTestCase import user_name, user_password
  >>> self.setRoles(['Manager'])

  >>> self.portal.invokeFactory('DDocument', 'test_document',
  ...                           title='Root Document')

  >>> self.portal.invokeFactory('DDocument', 'index_html',
  ...                           title='Root Index')

  >>> self.portal.invokeFactory('SimpleFolder', 'simple_folder')
  >>> self.portal.invokeFactory('SimpleBTreeFolder', 'simple_btree_folder')

XML-RPC
-------

XML-RPC is basically a ``POST`` with content-type text/xml. It should
be allowed to acquire content from higher-level hierarchies:

  >>> print self.portal.title_or_id()
  portal

  >>> print http(r"""
  ... POST /portal HTTP/1.0
  ... Authorization: Basic %s:%s
  ... Content-Type: text/xml
  ...
  ... <?xml version='1.0'?>
  ... <methodCall>
  ... <methodName>title_or_id</methodName>
  ... <params>
  ... </params>
  ...
  ... </methodCall>
  ... """ % (user_name, user_password))
  HTTP/1.0 200 OK
  ...portal...

  >>> print self.portal.test_document.getPortalTypeName()
  DDocument

  >>> print self.portal.test_document.title_or_id()
  Root Document

  >>> print http(r"""
  ... POST /portal HTTP/1.0
  ... Authorization: Basic %s:%s
  ... Content-Type: text/xml
  ...
  ... <?xml version='1.0'?>
  ... <methodCall>
  ... <methodName>test_document.title_or_id</methodName>
  ... <params>
  ... </params>
  ...
  ... </methodCall>
  ... """ % (user_name, user_password))
  HTTP/1.0 200 OK
  ...Root Document...

  >>> 'test_document' in self.portal.simple_folder.objectIds()
  False

  >>> print http(r"""
  ... POST /portal HTTP/1.0
  ... Authorization: Basic %s:%s
  ... Content-Type: text/xml
  ...
  ... <?xml version='1.0'?>
  ... <methodCall>
  ... <methodName>simple_folder.test_document.title_or_id</methodName>
  ... <params>
  ... </params>
  ...
  ... </methodCall>
  ... """ % (user_name, user_password))
  HTTP/1.0 200 OK
  ...Root Document...

  >>> 'test_document' in self.portal.simple_btree_folder.objectIds()
  False

  >>> print http(r"""
  ... POST /portal HTTP/1.0
  ... Authorization: Basic %s:%s
  ... Content-Type: text/xml
  ...
  ... <?xml version='1.0'?>
  ... <methodCall>
  ... <methodName>simple_btree_folder.test_document.title_or_id</methodName>
  ... <params>
  ... </params>
  ...
  ... </methodCall>
  ... """ % (user_name, user_password))
  HTTP/1.0 200 OK
  ...Root Document...

Browser
-------

For testing Browser access, we are going to just try using the ``GET``
method instead.

  >>> print self.portal.title_or_id()
  portal

  >>> print http(r"""
  ... GET /portal/title_or_id HTTP/1.0
  ... Authorization: Basic %s:%s
  ... """ % (user_name, user_password))
  HTTP/1.0 200 OK
  ...portal...

  >>> print self.portal.test_document.getPortalTypeName()
  DDocument

  >>> print self.portal.test_document.title_or_id()
  Root Document

  >>> print http(r"""
  ... GET /portal/test_document/title_or_id HTTP/1.0
  ... Authorization: Basic %s:%s
  ... """ % (user_name, user_password))
  HTTP/1.0 200 OK
  ...Root Document...

  >>> 'test_document' in self.portal.simple_folder.objectIds()
  False

  >>> print http(r"""
  ... GET /portal/simple_folder/test_document/title_or_id HTTP/1.0
  ... Authorization: Basic %s:%s
  ... """ % (user_name, user_password))
  HTTP/1.0 200 OK
  ...Root Document...

  >>> 'test_document' in self.portal.simple_btree_folder.objectIds()
  False

  >>> print http(r"""
  ... GET /portal/simple_btree_folder/test_document/title_or_id HTTP/1.0
  ... Authorization: Basic %s:%s
  ... """ % (user_name, user_password))
  HTTP/1.0 200 OK
  ...Root Document...


WebDAV
------

Now for the tricky part. WebDAV requests are *not* allowed to acquire
content, because that would completely break creation of content
through WebDAV.

  >>> print http(r"""
  ... PROPFIND /portal/test_document HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Content-Type: text/xml; charset="utf-8"
  ... Depth: 0
  ...
  ... <?xml version="1.0" encoding="utf-8"?>
  ...   <DAV:propfind xmlns:DAV="DAV:"
  ...      xmlns:zope="http://www.zope.org/propsets/default">
  ...      <DAV:prop><zope:title/></DAV:prop>
  ...   </DAV:propfind>
  ... """ % (user_name, user_password))
  HTTP/1.1 207 Multi-Status
  ...Root Document...

  >>> print http(r"""
  ... PROPFIND /portal/simple_folder/test_document HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Content-Type: text/xml; charset="utf-8"
  ... Depth: 0
  ...
  ... <?xml version="1.0" encoding="utf-8"?>
  ...   <DAV:propfind xmlns:DAV="DAV:"
  ...      xmlns:zope="http://www.zope.org/propsets/default">
  ...      <DAV:prop><zope:title/></DAV:prop>
  ...   </DAV:propfind>
  ... """ % (user_name, user_password))
  HTTP/1.1 404 Not Found
  ...

  >>> print http(r"""
  ... PROPFIND /portal/simple_btree_folder/test_document HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Content-Type: text/xml; charset="utf-8"
  ... Depth: 0
  ...
  ... <?xml version="1.0" encoding="utf-8"?>
  ...   <DAV:propfind xmlns:DAV="DAV:"
  ...      xmlns:zope="http://www.zope.org/propsets/default">
  ...      <DAV:prop><zope:title/></DAV:prop>
  ...   </DAV:propfind>
  ... """ % (user_name, user_password))
  HTTP/1.1 404 Not Found
  ...

Should be possible to create objects via PUT that would otherwise be
acquired.

Create a CTR predicate to map any content to ``DDocument``:

  >>> from Products.CMFCore.utils import getToolByName
  >>> ctr = getToolByName(self.portal, 'content_type_registry')
  >>> p_id = 'at_dav_test'
  >>> p_type = 'name_regex'
  >>> ctr.addPredicate(p_id, p_type)
  >>> class foo: pass
  >>> p_dict = foo()
  >>> p_dict.pattern = '.*'
  >>> ctr.updatePredicate(p_id, p_dict, 'DDocument')
  >>> ctr.reorderPredicate(p_id, 0)

  >>> print http(r"""
  ... PUT /portal/simple_folder/test_document HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Content-Type: text/plain; charset="utf-8"
  ... Depth: 0
  ...
  ... Simple Folder Document Content
  ... """ % (user_name, user_password))
  HTTP/1.1 201 Created
  ...

  >>> folder = self.portal.simple_folder
  >>> print folder.test_document.getPortalTypeName()
  DDocument

  >>> print folder.test_document.title_or_id()
  test_document

  >>> print folder.test_document.body
  Simple Folder Document Content
  <BLANKLINE>

  >>> print http(r"""
  ... PUT /portal/simple_btree_folder/test_document HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Content-Type: text/plain; charset="utf-8"
  ... Depth: 0
  ...
  ... BTree Folder Document Content
  ... """ % (user_name, user_password))
  HTTP/1.1 201 Created
  ...

  >>> folder = self.portal.simple_btree_folder
  >>> print folder.test_document.getPortalTypeName()
  DDocument

  >>> print folder.test_document.title_or_id()
  test_document

  >>> print folder.test_document.body
  BTree Folder Document Content
  <BLANKLINE>

Make sure it's possible to create a item named ``index_html`` into a
AT-based folder.

  >>> folder = self.portal.simple_folder
  >>> 'index_html' in folder.objectIds()
  False

  >>> print folder.index_html
  None

  >>> print http(r"""
  ... PUT /portal/simple_folder/index_html HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Content-Type: text/plain; charset="utf-8"
  ... Depth: 0
  ...
  ... Simple Folder Index
  ... """ % (user_name, user_password))
  HTTP/1.1 201 Created
  ...

  >>> print folder.index_html.title_or_id()
  index_html

  >>> print folder.index_html.body
  Simple Folder Index
  <BLANKLINE>


Now for a BTreeFolder:

  >>> folder = self.portal.simple_btree_folder
  >>> 'index_html' in folder.objectIds()
  False

  >>> print folder.index_html
  None

  >>> print http(r"""
  ... PUT /portal/simple_btree_folder/index_html HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Content-Type: text/plain; charset="utf-8"
  ... Depth: 0
  ...
  ... Simple BTree Folder Index
  ... """ % (user_name, user_password))
  HTTP/1.1 201 Created
  ...

  >>> 'index_html' in folder.objectIds()
  True

  >>> print folder.index_html.title_or_id()
  index_html

  >>> print folder.index_html.body
  Simple BTree Folder Index
  <BLANKLINE>

Finally, cleanup the CTR predicate to not affect other tests:

  >>> ctr.removePredicate(p_id)

Creating folders should work the same way. And the newly created folder
should be of the same kind as the parent:

  >>> print http(r"""
  ... MKCOL /portal/simple_folder/simple_folder HTTP/1.1
  ... Authorization: Basic %s:%s
  ... """ % (user_name, user_password))
  HTTP/1.1 201 Created
  ...

  >>> folder = self.portal.simple_folder.simple_folder
  >>> print folder.getPortalTypeName()
  SimpleFolder

  >>> print http(r"""
  ... MKCOL /portal/simple_btree_folder/simple_btree_folder HTTP/1.1
  ... Authorization: Basic %s:%s
  ... """ % (user_name, user_password))
  HTTP/1.1 201 Created
  ...

  >>> folder = self.portal.simple_btree_folder.simple_btree_folder
  >>> print folder.getPortalTypeName()
  SimpleBTreeFolder

